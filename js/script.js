// Generated by CoffeeScript 1.8.0
(function() {
  var depth, easeOutQuart, easing, goCrazy, pageHeight, pageWidth, parallaxWidth, planes, prevX, resize, sgn, supportsMouse, tiltHeight, tiltWidth, transformKey, update, updatePlane,
    __hasProp = {}.hasOwnProperty;

  easeOutQuart = function(d) {
    return function(t) {
      return 1 - (t / d - 1) * (t / d - 1) * (t / d - 1) * (t / d - 1);
    };
  };

  easing = easeOutQuart(1.8);

  depth = 1000;

  tiltWidth = 200;

  tiltHeight = 0;

  planes = {
    contact: {
      z: +500,
      offset: -tiltWidth,
      align: 'left'
    },
    projects: {
      z: +500,
      offset: -tiltWidth,
      align: 'right'
    },
    content: {
      z: 0
    },
    background: {
      z: -1500,
      cover: true
    }
  };

  transformKey = 'transform';

  pageWidth = void 0;

  pageHeight = void 0;

  parallaxWidth = void 0;

  if (document.body.style.webkitTransform != null) {
    transformKey = 'webkitTransform';
  }

  if (transformKey === 'webkitTransform' || transformKey === 'oTransform') {
    planes.contact.rescale = true;
    planes.projects.rescale = true;
  }

  resize = function() {
    var name, offset, plane, ratio, _results;
    pageWidth = $('body').outerWidth();
    pageHeight = $('body').outerHeight();
    parallaxWidth = pageWidth * 0.6;
    _results = [];
    for (name in planes) {
      if (!__hasProp.call(planes, name)) continue;
      plane = planes[name];
      if (plane.el == null) {
        plane.el = document.querySelector('.' + name);
      }
      ratio = 1.0 - plane.z / depth;
      if (plane.cover != null) {
        plane.el.style.width = (pageWidth * ratio + 2 * tiltWidth) + 'px';
        plane.el.style.height = (pageHeight * ratio + 2 * tiltHeight) + 'px';
        plane.el.style.left = pageWidth * (1.0 - ratio) / 2 - tiltWidth + 'px';
        plane.el.style.top = pageHeight * (1.0 - ratio) / 2 - tiltHeight + 'px';
      }
      if (plane.align != null) {
        if (plane.rescale) {
          offset = plane.offset + pageWidth * plane.z / depth / 2;
          plane.el.style[transformKey + 'Origin'] = plane.align;
        }
        _results.push(plane.el.style[plane.align] = (offset != null ? offset : plane.offset) + 'px');
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  update = function(x) {
    var name, plane, _results;
    _results = [];
    for (name in planes) {
      if (!__hasProp.call(planes, name)) continue;
      plane = planes[name];
      _results.push(updatePlane(name, plane, x));
    }
    return _results;
  };

  sgn = function(v) {
    return v / Math.abs(v);
  };

  updatePlane = function(name, plane, x) {
    var transform, xt, xtEased, _ref, _ref1, _ref2;
    xt = Math.min(+1.0, Math.max(-1.0, (x != null ? x : prevX) / parallaxWidth * 2));
    xtEased = sgn(xt) * easing(Math.abs(xt));
    if (plane.el == null) {
      plane.el = document.querySelector('.' + name);
    }
    transform = 'translate3d(' + Math.floor(((_ref = plane.x) != null ? _ref : 0) - tiltWidth * xt) + 'px, ' + Math.floor((_ref1 = plane.y) != null ? _ref1 : 0) + 'px, ' + Math.floor((_ref2 = plane.z) != null ? _ref2 : 0) + 'px)';
    if (plane.rescale != null) {
      transform += ' scale(' + (1.0 - plane.z / depth) + ')';
    }
    if (plane.transform != null) {
      transform += ' ' + plane.transform;
    }
    return plane.el.style[transformKey] = transform;
  };

  prevX = void 0;

  supportsMouse = function() {
    return $(document).outerWidth() > 400;
  };

  if (supportsMouse()) {
    $(document.documentElement).addClass('supportsMouse');
    $(document).mousemove(function(event) {
      var x;
      x = event.pageX - pageWidth / 2;
      if (x !== prevX) {
        update(x);
      }
      return prevX = x;
    });
    $(document).resize(resize);
    $(document).ready(function() {
      resize();
      return update(prevX != null ? prevX : 0);
    });
    resize();
    update(0);
  }


  /* KONAMI CODE */

  $.fn.konami = function(callback) {
    var code, numKeys;
    code = ",38,38,40,40,37,39,37,39,66,65$";
    numKeys = code.split(',').length;
    return this.each(function() {
      var kkeys;
      kkeys = [''];
      return $(this).keydown(function(e) {
        kkeys = kkeys.slice(Math.max(0, kkeys.length - numKeys));
        kkeys.push(e.keyCode);
        if ((kkeys.toString() + '$').indexOf(code) >= 0) {
          $(this).unbind('keydown', arguments.callee);
          return callback();
        }
      });
    });
  };

  goCrazy = function() {
    var banana, bananaContainer, bananas, clean, maxBananas, secondsPerBanana, simulate, t0, tBanana, tClean;
    secondsPerBanana = 1 / 10;
    maxBananas = 200;
    bananas = [];
    bananaContainer = document.body;
    $(bananaContainer).addClass('bananas');
    banana = function() {
      var plane, ratio;
      ratio = 1.0 - planes.background.z / depth;
      plane = {
        el: document.createElement('banana'),
        x: ratio * pageWidth * (Math.random() - 0.5),
        y: ratio * pageHeight * (Math.random() - 0.5),
        z: planes.background.z,
        dx: +100 * (2 * Math.random() - 1),
        dy: -100 * (Math.random() + 1),
        dz: +200 * (Math.random() + 1),
        ddy: 80,
        ddx: 0,
        ddz: -2
      };
      bananaContainer.appendChild(plane.el);
      planes['banana' + bananas.length] = plane;
      bananas.push(plane);
      return updatePlane('banana', plane);
    };
    clean = function() {
      return bananas = bananas.filter(function(plane, i) {
        if (plane.y < 2 * pageHeight && plane.z < depth) {
          return true;
        }
        bananaContainer.removeChild(plane.el);
        delete planes['banana' + i];
        return false;
      });
    };
    simulate = function(t) {
      var i, plane, _results;
      _results = [];
      for (i in bananas) {
        if (!__hasProp.call(bananas, i)) continue;
        plane = bananas[i];
        plane.x += t * (plane.dx + plane.ddx * t / 2);
        plane.y += t * (plane.dy + plane.ddy * t / 2);
        plane.z += t * (plane.dz + plane.ddz * t / 2);
        plane.dx += t * plane.ddx;
        plane.dy += t * plane.ddy;
        plane.dz += t * plane.ddz;
        _results.push(updatePlane('banana', plane));
      }
      return _results;
    };
    t0 = Number(new Date()) / 1e3;
    tBanana = t0;
    tClean = t0;
    return setInterval(function() {
      var t1;
      t1 = Number(new Date()) / 1e3;
      if ((t1 - tBanana) >= secondsPerBanana && bananas.length < maxBananas) {
        banana();
        tBanana = t1;
      }
      if ((t1 - tClean) >= 5 * secondsPerBanana) {
        clean();
        tClean = t1;
      }
      simulate(t1 - t0);
      return t0 = t1;
    }, 50);
  };

  $(document).konami(goCrazy);

  $(document).on('dblclick', function(ev) {
    console.log(ev.target);
    if ($(ev.target.parentNode).hasClass('content')) {
      $(document).unbind('dblclick', arguments.callee);
      return goCrazy();
    }
  });

}).call(this);
